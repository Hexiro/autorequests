# import difflib
# from pathlib import Path
# from typing import Optional
#
# from . import Input
# from ..utils import cached_property
#
#
# class Output:
#
#     def __init__(self, output_path: Path, input: Input):
#         self.__output_path = output_path
#         self.__input = input
#
#     def __repr__(self):
#         return f"<{self.__class__.__name__} {self.folder!s}>"
#
#     @property
#     def output_path(self) -> Path:
#         return self.__output_path
#
#     @property
#     def input(self) -> Input:
#         return self.__input
#
#     @property
#     def top(self):
#         return ("import requests\n"
#                 "\n"
#                 "\n"
#                 "# Automatically generated by https://github.com/Hexiro/autorequests.\n"
#                 "\n")
#
#     @cached_property
#     def code(self) -> str:
#         return self.top + self.class_.code
#
#     @cached_property
#     def folder(self) -> Path:
#         if self.filepath.name != self.class_.name:
#             return self.filepath / self.class_.name
#         # ex. class is named "autorequests" and output folder is named "autorequests"
#         return self.filepath
#         return self.input.
#
#     def in_same_dir(self) -> bool:
#         return self.filepath.name == self.folder.name
#
#     @property
#     def python_file(self) -> Path:
#         return self.folder / "main.py"
#
#     def write(self):
#         for cls in self.input.classes:
#             loc = self.input.
#         self.python_file.write_text(self.code, encoding="utf8", errors="strict")
#
#     def write_changes(self):
#         self.changes_file.write_text(self.changes, encoding="utf8", errors="strict")
