import difflib
from typing import Optional

from ..utils import PathType, cached_property


class OutputFile:

    def __init__(self, filepath: PathType, class_object: "Class"):
        self.__filepath = filepath
        self.__class = class_object

    def __repr__(self):
        return f"<OutputFile {self.class_.name}.py>"

    @property
    def filepath(self) -> PathType:
        return self.__filepath

    @property
    def class_(self):
        return self.__class

    @cached_property
    def text(self) -> Optional[str]:
        if self.python_file.is_file():
            return self.python_file.read_text(encoding="utf8", errors="ignore")

    @property
    def top(self):
        return ("import requests\n"
                "\n"
                "\n"
                "# Automatically generated by https://github.com/Hexiro/autorequests.\n"
                "\n")

    @cached_property
    def code(self) -> str:
        return self.top + self.class_.code

    @cached_property
    def folder(self) -> PathType:
        if self.filepath.name != self.class_.name:
            return self.filepath / self.class_.name
        # ex. class is named "autorequests" and output folder is named "autorequests"
        return self.filepath

    def in_same_dir(self) -> bool:
        return self.filepath.name == self.folder.name

    @property
    def python_file(self) -> PathType:
        return self.folder / "main.py"

    @property
    def changes_file(self) -> PathType:
        return self.folder / "changes.html"

    @cached_property
    def changes(self) -> str:
        return difflib.HtmlDiff().make_file(self.text.splitlines(), self.code.splitlines(), context=True)

    def write(self):
        self.python_file.write_text(self.code, encoding="utf8", errors="strict")

    def write_changes(self):
        self.changes_file.write_text(self.changes, encoding="utf8", errors="strict")
